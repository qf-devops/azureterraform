09/10/23
1. install terraform and az commands in local machine

2. create main.tf and run terrform commands
   terraform init
   terraform plan -out terraform.plan
    terraform apply "terraform.plan"  
    terraform destroy --auto-approve

3. create backend and use azure blob container as a remote backend.
   ref:  https://developer.hashicorp.com/terraform/language/settings/backends/azurerm

4. create Azure storage account and blob container using terraform

5.  create 3 resource groups for different environments  using tfvars

6. create multiple blob container with list  type and foreach.

7. create queues resources using count keyword

8. use map and list to iterate multiple values
    fileshare_list = [{
        "name" = "webfileshare"
        "quota" = "20"
        },
        {
        "name" = "webfileshare"
        "quota" = "20"
        },
       
         {
        "name" = "webfileshare"
        "quota" = "20"
        },{
        "name" = "webfileshare"
        "quota" = "20"
        }
        ]
   ref:  https://stackoverflow.com/questions/74578117/terraform-variable-type-for-list-of-maps

9. create multiple containers with different accesstypes using map of map .
data example: 
container_list = {
 container1 = {
         "name" = "webapp01"
         "accesstype" = "private"
         },
 container2 = {
         "name" = "webapp02"
         "accesstype" = "blob"
         },
container3 = {
         "name" = "webapp03"
         "accesstype" = "private"
         },
container4 = {
         "name" = "webapp04"
         "accesstype" = "private"
         },
container5 = {
         "name" = "webapp05"
         "accesstype" = "blob"
         }
}

10. create a vm mentioned with below mentioned link:
https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_machine
 

 11. use modules for vms with paramerized
 12. create multipl vms with modules 

 state
 import
 destroy with target options


11. create virtual machine with bootstrap script using terraform.

 configuration link: 
   https://ubuntu.com/tutorials/install-and-configure-nginx#5-activating-virtual-host-and-testing-results

12. assign public Ip address to this vm.

13. elaborate on virtual_machine_extension with existing linux vm.

  https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_machine_extension

14. how to add application insights to appservice
    https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/application_insights

15. enable db connection to appservice using connection_stering 

  connection_string {
    name  = "Database"
    type  = "SQLAzure"
    value = "Server=tcp:azurerm_sql_server.sqldb.fully_qualified_domain_name Database=azurerm_sql_database.db.name;User ID=azurerm_sql_server.sqldb.administrator_login;Password=azurerm_sql_server.sqldb.administrator_login_password;Trusted_Connection=False;Encrypt=True;"
  }

16. cosmosdb with webapp
     https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service_connection

17. create azure cntainer registry using terraform